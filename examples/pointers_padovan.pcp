fn add(a: int, b: int) -> int {
    asm {
        "        lw      r1,-8(r30)",
        "        lw      r2,-4(r30)",
        "        add     r1,r1,r2",
    }
}

fn sub(a: int, b: int) -> int {
    asm {
        "        lw      r1,-8(r30)",
        "        lw      r2,-4(r30)",
        "        sub     r1,r1,r2",
    }
}

fn less_than(a: int, b: int) -> bool {
    asm {
        "        lw      r1,-8(r30)",
        "        lw      r2,-4(r30)",
        "        slt     r1,r1,r2",
    }
}

fn less_than_eq(a: int, b: int) -> bool {
    asm {
        "        lw      r1,-8(r30)",
        "        lw      r2,-4(r30)",
        "        sle     r1,r1,r2",
    }
}

# Compute the nth padovan number recursively
fn pad(n: int) -> int {
    if (less_than(n, 3)) {
        return 1;
    }

    add(pad(sub(n, 2)), pad(sub(n, 3)))
}

# Compute the sum of all padovan numbers up to n
fn padSum(low: *int, high: *int, step: *int) -> int {
    if (less_than(*low, 0)) {
        return -1;
    }
    if (less_than(*high, *low)) {
        return -1;
    }
    if (less_than(*step, 1)) {
        return -1;
    }
    
    let i = *low;
    let result = 0;
    let result_ptr = &result;
    while (less_than_eq(i, *high)) {
        *result_ptr = add(*result_ptr, pad(i));
        i = add(i, *step);
    }
    
    *result_ptr
}

fn main() {
    let low = 2;
    let high = 11;
    let step = 2;
    
    let result = padSum(&low, &high, &step);
    let result_ptr = &result;
    *result_ptr
}
